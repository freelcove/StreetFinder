generator client {
  provider     = "prisma-client-js"
  relationMode = "prisma"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Category {
  id   Int    @id
  name String @db.VarChar(200)
}

model City {
  id   Int    @id
  name String @db.VarChar(200)
}

model Place {
  id             Int       @id
  name           String    @db.VarChar(200)
  latitude       Decimal?  @db.Decimal(18, 10)
  longitude      Decimal?  @db.Decimal(18, 10)
  city_id        Int
  address        String?   @db.VarChar(400)
  category_id    Int
  subcategory_id Int
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @default(now()) @db.Timestamp(0)
}

model Subcategory {
  id          Int    @id
  name        String @db.VarChar(200)
  category_id Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @unique @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
